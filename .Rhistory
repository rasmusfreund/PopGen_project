pca <- snpgdsPCA(genofile, eigen.cnt = 0)
summary(pca)
View(info)
library(dplyr)
eigenvectors <- as.data.frame(pca$eigenvect[,1:5])
colnames(eigenvectors) <- as.vector(sprintf("PC%s", seq(1:ncol(eigenvectors))))
rownames(info) <- info[, "ID"]
eigenvectors <- bind_cols(eigenvectors, info$population, pca$sample.id)
colnames(eigenvectors)[c(6,7)] <- c("population", "ID")
eigenvectors <- bind_cols(eigenvectors, info$population, pca$sample.id)
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "region"))
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "region")])
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "sex")])
eigenvectors
# Variance proportion
pca$pca_percent <- pca$varprop*100
ggplot(NULL, aes(x = seq(1, length(na.omit(pca$pca_percent))), y = na.omit(pca$pca_percent), label = sprintf("%0.2f", round(na.omit(pca$pca_percent), digits = 2)))) +
geom_line() +
geom_point() +
geom_text(nudge_y = .3, nudge_x = 1.5, check_overlap = T)
pca$pca_percent_cumulative <- cumsum(pca$pca_percent)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = .3, nudge_x = 1.5, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = 0.1*nrow(pca), nudge_x = 0.15*nrow(pca), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = 0.2*nrow(pca), nudge_x = 0.15*nrow(pca), check_overlap = T)
nrow(pca)
length(pca)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = 0.2*nrow(eigenvectors), nudge_x = 0.15*nrow(pca), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = 0.01*nrow(eigenvectors), nudge_x = 0.15*nrow(pca), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -.01*nrow(eigenvectors), nudge_x = 0.15*nrow(pca), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -.01*nrow(eigenvectors), nudge_x = 0.015*nrow(eigenvectors), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -.005*nrow(eigenvectors), nudge_x = 0.015*nrow(eigenvectors), check_overlap = T)
.005*nrow(eigenvector)
.005*nrow(eigenvectors)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6*nrow(eigenvectors), nudge_x = 0.015*nrow(eigenvectors), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 0.015*nrow(eigenvectors), check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 7, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 10, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 15, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 10, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 20, check_overlap = T)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 30, check_overlap = T)
which(pca$pca_percent_cumulative > 50)
which(pca$pca_percent_cumulative > 50)[1]
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = population)) +
geom_point(size=3,alpha=0.5) + geom_text( aes(label=population), col="black") +
theme_bw
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = population)) +
geom_point(size=3,alpha=0.5) + geom_text( aes(label=population), col="black") +
theme_bw()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = population)) +
geom_point(size=3,alpha=0.5) +
theme_bw()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = population)) +
geom_point(size=2,alpha=0.5) +
theme_bw()
ggplot(data = eigenvectors, aes(x = PC2, y = PC3, col = population)) +
geom_point(size=2,alpha=0.5) +
theme_bw()
cor(eigenvectors$PC2, eigenvectors$PC3)
snpset <- snpgdsLDpruning(genofile, ld.threshold = 0.3)
# Get all selected snp's id
snpset.id <- unlist(snpset)
pca_pruned <- snpgdsPCA(genofile, snp.id = snpset.id, num.thread = 2, eigen.cnt = 0)
library(dplyr)
eigenvectors <- as.data.frame(pca$eigenvect[,1:5])
colnames(eigenvectors) <- as.vector(sprintf("PC%s", seq(1:ncol(eigenvectors))))
rownames(info) <- info[, "ID"]
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "pheno")])
# Variance proportion
pca$pca_percent <- pca$varprop*100
ggplot(NULL, aes(x = seq(1, length(na.omit(pca$pca_percent))), y = na.omit(pca$pca_percent), label = sprintf("%0.2f", round(na.omit(pca$pca_percent), digits = 2)))) +
geom_line() +
geom_point() +
geom_text(nudge_y = .3, nudge_x = 1.5, check_overlap = T)
pca$pca_percent_cumulative <- cumsum(pca$pca_percent)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 30, check_overlap = T)
which(pca$pca_percent_cumulative > 50)[1]
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = pheno)) +
geom_point(size=2,alpha=0.5) +
theme_bw()
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "sex")])
# Variance proportion
pca$pca_percent <- pca$varprop*100
ggplot(NULL, aes(x = seq(1, length(na.omit(pca$pca_percent))), y = na.omit(pca$pca_percent), label = sprintf("%0.2f", round(na.omit(pca$pca_percent), digits = 2)))) +
geom_line() +
geom_point() +
geom_text(nudge_y = .3, nudge_x = 1.5, check_overlap = T)
library(dplyr)
eigenvectors <- as.data.frame(pca$eigenvect[,1:5])
colnames(eigenvectors) <- as.vector(sprintf("PC%s", seq(1:ncol(eigenvectors))))
rownames(info) <- info[, "ID"]
eigenvectors <- bind_cols(eigenvectors, info[pca$sample.id, c("population", "sex")])
# Variance proportion
pca$pca_percent <- pca$varprop*100
ggplot(NULL, aes(x = seq(1, length(na.omit(pca$pca_percent))), y = na.omit(pca$pca_percent), label = sprintf("%0.2f", round(na.omit(pca$pca_percent), digits = 2)))) +
geom_line() +
geom_point() +
geom_text(nudge_y = .3, nudge_x = 1.5, check_overlap = T)
pca$pca_percent_cumulative <- cumsum(pca$pca_percent)
ggplot( NULL, aes(x=seq(1, length(pca$eigenval)), y=pca$pca_percent_cumulative, label=sprintf("%0.2f", round(pca$pca_percent_cumulative, digits = 2))) ) +
geom_line() + geom_point() +
geom_text(nudge_y = -6, nudge_x = 30, check_overlap = T)
which(pca$pca_percent_cumulative > 50)[1]
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = pheno)) +
geom_point(size=2,alpha=0.5) +
theme_bw()
ggplot(data = eigenvectors, aes(x = PC1, y = PC2, col = population)) +
geom_point(size=2,alpha=0.5) +
theme_bw()
?snpgdsPCA
#add metadata
eigenvectors <- as.data.frame(pca_pruned$eigenvect)
colnames(eigenvectors) <- as.vector(sprintf("PC%s", seq(1:nrow(pca$eigenvect))))
eigenvectors <- cbind(eigenvectors, info[pca$sample.id, c("population", "sex")])
# Plot
ggplot(data = eigenvectors, aes(x = PC3, y = PC2, col = population)) +
geom_point(size = 2, alpha = .5) +
theme_bw() +
coord_flip()
View(genofile)
snpset_01 <- snpgdsLDpruning(genofile, ld.threshold = 0.1)
snpset_02 <- snpgdsLDpruning(genofile, ld.threshold = 0.2)
snpset_03 <- snpgdsLDpruning(genofile, ld.threshold = 0.3)
snpset_04 <- snpgdsLDpruning(genofile, ld.threshold = 0.4)
snpset_05 <- snpgdsLDpruning(genofile, ld.threshold = 0.5)
snpgdsGDS2BED(genofile, "Results/hapmap_pruned.gds", sample.id = NULL, snp.id = snpset.id, snpfirstdim = NULL, verbose = T)
save(pca, pca_pruned, info, genofile, file = "Results/data.Rdata")
library(tidyverse)
library(ggthemes)
library(knitr)
theme_set(theme_minimal(base_size = 15, base_line_size = 1.5))
set.seed(42)
n_ind <- 300  # How many individuals in each class
n_features <- 10^4 # How many spurious features ( aka predictors)
fake_features <- rnorm(n = 2*n_ind*n_features) # 2*n_ind in total * n_features
fake_df <- as_tibble(matrix(data = fake_features, ncol = n_features))
dim(fake_df)
rm(fake_features) # not needed --> cleanup
reponse_binary <- as.factor(c(rep("Control", n_ind), rep("Case", n_ind)))
reponse_score <- rnorm(n = 2*n_ind, mean = 10, sd = 2)
length(reponse_score)
pseudo_df  <- tibble(reponse_binary, fake_df)
pseudo_df %>% select(1:6) %>% head() %>% kable("pandoc", digits = 2)
df_longer <- pivot_longer(data = pseudo_df,
cols =2:(n_features+1),names_to = "Feature")
dim(df_longer)
names(df_longer) <-c("response", "Feature", "log10_gene_expr")
head(df_longer) %>% knitr::kable(digits = 2)
stats_byFeature_by_treatment <-df_longer %>%
group_by(Feature,response) %>%
summarize(n_obs = n(),   # just a check sample size
mean = mean(log10_gene_expr),
var = var(log10_gene_expr))
head(stats_byFeature_by_treatment) %>% knitr::kable(digits = 2)
summary_features <-pivot_wider(data = stats_byFeature_by_treatment,
names_from = response,
values_from = c("n_obs","mean", "var"))
head(summary_features) %>% knitr::kable(digits = 2)
summary_features  <- summary_features %>%
mutate(mean_diff = mean_Case - mean_Control) %>%
mutate(se_diff = sqrt( (var_Case/n_obs_Case) +(var_Control/n_obs_Control)) ) %>%
mutate(t_welch = mean_diff / se_diff) %>%
arrange(-abs(t_welch)) %>%
{.}
knitr::kable(summary_features[1:10, c(1,8,10)], col.names = c("gene", "Obs_diff", "t_obs"))
ggplot(data = summary_features, aes(x=t_welch))+
geom_histogram(bins = 20, fill="cornflowerblue")+  # <--my kind of blue :)
xlab("standardized difference in Means vs. Controls")+
theme_minimal(base_size = 15)+
NULL
pseudo_df <- pseudo_df %>%
mutate(logistic01 = ifelse(reponse_binary == "Case", 0, 1))
table(pseudo_df$logistic01)
ggplot(pseudo_df, aes(x=V1608, y = V3630, color = reponse_binary)) +
geom_point(size=2, alpha=0.85)+
theme_minimal(base_size = 15)+
theme(legend.position = "bottom")+
NULL
m1 <- glm(data = pseudo_df, formula = logistic01 ~ V1608 + V3630 ,  family = "binomial" )
m0 <- glm(data = pseudo_df, formula = logistic01 ~ 1,  family = "binomial" )
(1 - m1$deviance/m0$deviance)
pseudo_df$magic <-m1$fitted.values
ggplot(data = pseudo_df, aes(x=magic, fill = reponse_binary)) +
geom_dotplot(binwidth = 0.0150)+
scale_fill_colorblind()+
xlab("2 logistic regression predictors") +
NULL
pseudo_df$reponse_binary
library(tidyverse)
getwd()
tcgadf <- read_rds("../datasets/TCGA_cancer_classification/miniTCGA.3349x4006.rds")
names(tcgadf)[1:30]
tcgadf %>%
group_by(response) %>%
summarise(observations=n()) %>%
knitr::kable()
tcgadf <- tcgadf %>%
mutate(sampletype=response,
response=ifelse(test= response=="Tumor", yes = 1, no = 0 ))
tcgadf %>%
group_by(response) %>%
summarise(observations=n()) %>%
knitr::kable()
dim(tcgadf) # check this should be 3349 4007
tcgadf %>%
na.omit() %>%
mutate(response = as.factor(response)) -> pd
ggplot(pd, aes(x = pc1, y = pc2)) +
geom_point(aes(color = tissue, shape = response), size = 2, alpha = .7)+
scale_colour_tableau() +
theme_clean()
library(ggpubr)
tcgadf %>%
na.omit() %>%
mutate(response = as.factor(response)) %>%
filter(tissue == "Breast") %>%
ggplot() +
geom_point(aes(x = pc1, y = pc2, color = response)) +
scale_colour_tableau(name = "Response",
labels = c("Normal", "Tumor")) +
ggtitle("Breast") +
theme_clean() -> pd_breast
tcgadf %>%
na.omit() %>%
mutate(response = as.factor(response)) %>%
filter(tissue == "Lung") %>%
ggplot() +
geom_point(aes(x = pc1, y = pc2, color = response)) +
scale_colour_tableau(name = "Response",
labels = c("Normal", "Tumor")) +
ggtitle("Lung") +
theme_clean() -> pd_lung
tcgadf %>%
na.omit() %>%
mutate(response = as.factor(response)) %>%
filter(tissue == "Kidney") %>%
ggplot() +
geom_point(aes(x = pc1, y = pc2, color = response)) +
scale_colour_tableau(name = "Response",
labels = c("Normal", "Tumor")) +
ggtitle("Kidney") +
theme_clean() -> pd_kidney
ggarrange(pd_breast, pd_kidney, pd_lung, common.legend = TRUE )
tcgadf %>% filter(tissue != is.na(tissue)) -> training_data
training_data %>% select(-c(rowid, tissue, pc1, pc2, pc3)) %>%
glm(formula = response ~., family = binomial) -> glm.overall
summary(glm.overall)
summary(glm.breast)
training_data %>%
filter(tissue == "Breast") %>%
select(-c(rowid, pc1, pc2, pc3, tissue)) %>%
glm(formula = response ~ ., family = binomial) -> glm.breast
summary(glm.breast)
summary(glm.breast)$coef
training_data %>%
select(-c(rowid, pc3, tissue)) %>%
glm(formula = response ~ pc1 + pc2, family = binomial) -> glm.pcs
summary(glm.pcs)
summary(glm.pcs)$coef
pivot_longer(training_data)
training_data
training_data %>% select(-c(tissue,pc1,pc2,pc3))
training_data %>% select(-c(tissue,pc1,pc2,pc3)) %>% pivot_longer(response)
training_data %>% select(-c(tissue,pc1,pc2,pc3,rowid)) %>% pivot_longer(response)
training_data %>% select(-c(tissue,pc1,pc2,pc3,rowid)) %>% pivot_longer(response, ncol = 2)
tcgadf %>% select(-starts_with('pc'))
tcgadf %>% select(starts_with('pc'))
library(tidyverse)
library(broom)
library(mice)
library(glmnet)
library(ggpubr)
library(ggthemes)
df <- read_rds(file = "C:\\Users\\rasmu\\Documents\\GitHub\\SML\\Datasets\\TCGA_cancer_classification\\miniTCGA.3349x4006.rds")
data_train <- df %>% filter(!is.na(response))
data_predict <- df %>% filter(is.na(response))
data_predict
set.seed(0)
train_fold <- data_train %>% sample_frac(size = .80)
test_fold <- setdiff(data_train, train_fold)
# Regularization as dimension reduction
# Breast = 0, Lung = 1, Kidney = 2
set.seed(0)
train_fold <- data_train %>% sample_frac(size = .80)
test_fold <- setdiff(data_train, train_fold)
tissue_training <- train_fold[, -c(1, 2)] %>% mutate(tissue = ifelse(tissue == "Breast", 0,
ifelse(tissue == "Lung", 1, 2)))
x <- model.matrix(tissue ~ ., data = tissue_training)
y <- tissue_training$tissue
tissue_testing <- test_fold[, -c(1, 2)] %>% mutate(tissue = ifelse(tissue == "Breast", 0,
ifelse(tissue == "Lung", 1, 2)))
x_test <- model.matrix(tissue ~ ., data = tissue_testing)
y_test <- tissue_testing$tissue
grid <- 10^seq(10, -2, length = 100)
lasso_tissue.mod <- glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso_tissue.mod)
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
lasso.pred <- predict(lasso_tissue.mod, s = bestlam, newx = x_test, type = "class")
out <- glmnet(x, y, alpha = 1, lambda = grid)
lasso.coef <- predict(out, type = "coefficients", s = bestlam)
coef_matrix <- as.matrix(lasso.coef)
nonzero_coef <- names(which(coef_matrix[, 1] != 0 ))[-1]
# Model training for train data
lasso_selected_training <- subset(train_fold, select = nonzero_coef)
lasso_fit <- glmnet(lasso_selected_training, y, family = "multinomial")
lasso_test_predictors <- test_fold %>% select(nonzero_coef) %>% as.matrix()
lasso_predict_tissue <- predict(lasso_fit, newx = lasso_test_predictors, type = "class")
mean(y_test == lasso_predict_tissue)
summary(lasso_predict_tissue)
summary(lasso_fit)
names(summary(lasso_fit))
summary(lasso_fit)
summary(lasso_fit)$dev.ratio
sum_lasso_fit <- summary(lasso_fit)
sum_lasso_fit
sum_lasso_fit[a0]
sum_lasso_fit
sum_lasso_fit.a0
sum_lasso_fit
class(sum_lasso_fit)
library(tidyverse)
library(broom)
library(mice)
library(glmnet)
library(ggpubr)
library(ggthemes)
knitr::opts_chunk$set(echo = TRUE, dev="CairoPNG")
library(tidyverse)
library(ggthemes)
library(ggthemes)
d_miss <- read.table("gwas_QC.imiss", header = T)
d_het <- read.table("gwas_QC.het", header = T)
setwd("C:/Users/rasmu/Desktop/Bioinformatics/Population genomics/GWAS_project/data")
d_miss <- read.table("gwas_QC.imiss", header = T)
d_het <- read.table("gwas_QC.het", header = T)
d_he
d_het
d_het %>%
mutate(O.HET = N.NM. - (O.HOM. / N.NM.))
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.)
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
d_miss
knitr::opts_chunk$set(echo = TRUE, dev="CairoPNG")
library(tidyverse)
library(ggthemes)
d_miss <- read.table("gwas_QC.imiss", header = T)
d_het <- read.table("gwas_QC.het", header = T)
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
d_miss
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss))
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS))
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean()
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
sd(d_het$O.HET)
is.na(d_het$O.HET)
is.na(d_het$N.NM.)
is.na(d_het$O.HOM.)
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
d_miss <- read.table("gwas_QC.imiss", header = T)
d_het <- read.table("gwas_QC.het", header = T)
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
sum(is.na(d_het$O.HOM.))
sum(is.na(d_het$O.HET.))
is.na(d_het$O.HET)
d_het
d_miss
d_het
which(d_het$O.HOM. == 0)
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
missing <- which(d_het$O.HOM. == 0)
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
missing <- which(d_het$O.HOM. == 0 & d_het$N.NM. == 0)
missing_IIDs <- d_het$IID[missing, ]
missing_IIDs <- d_het$IID[, missing]
missing_IIDs <- d_het$IID[list(missing), ]
missing_IIDs <- d_het$IID[missing]
missing_IIDs
d_het %>%
filter(IID != missing_IIDs)
d_het %>%
filter(IID == missing_IIDs)
d_het %>%
filter(IID %in% missing_IIDs)
d_het %>%
filter(IID %in% missing_IIDs)
d_het %>%
filter(!(IID %in% missing_IIDs))
d_het %>%
filter(!(IID %in% missing_IIDs)) -> d_het
d_miss %>%
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
d_miss %>%
filter(!(IID %id% missing_IIDs)) -> d_miss
d_miss %>%
filter(!(IID %in% missing_IIDs)) -> d_miss
d_het %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d_het
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
d_het %>%
filter(sd(O.HET) * 3 > mean(O.HET))
sd(d_het$O.HET)
3 * sd(O.HET)
d_het %>%
filter(3 * sd(O.HET))
d_het %>%
filter(3 * sd(O.HET) > abs(mean(O.HET)) + 3 * sd(O.HET) )
d_het %>%
filter(O.HET. > abs(mean(O.HET)) + 3 * sd(O.HET) )
d_het %>%
filter(O.HET. > (abs(mean(O.HET)) + 3 * sd(O.HET)))
d_het %>%
filter(d_het$O.HET. > (abs(mean(O.HET)) + 3 * sd(O.HET)))
d_het %>%
filter(d_het$O.HET. > (abs(mean(O.HET.)) + 3 * sd(O.HET.)))
d_het %>%
filter(O.HET. > (abs(mean(O.HET.)) + 3 * sd(O.HET.)))
sd(d_het$O.HET)
d_het %>%
filter(O.HET > (abs(mean(O.HET)) + 3 * sd(O.HET)))
d_het %>%
filter(O.HET > (abs(mean(O.HET)) + 3 * sd(O.HET))) -> het_outliers
d_miss %>%
filter(F_MISS >= 0.03)
d_miss <- read.table("gwas_QC.imiss", header = T)
d_het <- read.table("gwas_QC.het", header = T)
d <- inner_join(d_miss, d_het)
missing <- which(d$O.HOM. == 0 & d$N.NM. == 0)
missing_IIDs <- d$IID[missing]
# Remove rows with missing data
d %>%
filter(!(IID %in% missing_IIDs)) -> d
d %>%
mutate(O.HET = (N.NM. - O.HOM.) / N.NM.) -> d
ggplot() +
geom_point(aes(x = d_het$O.HET, y = d_miss$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
ggplot() +
geom_point(aes(x = d$O.HET, y = d$F_MISS)) +
theme_clean() +
labs(x = "Observed heterozygosity rate",
y = "Proportion of missing SNPs")
d %>%
filter(O.HET > (abs(mean(O.HET)) + 3 * sd(O.HET))) -> het_outliers
het_outliers
d %>%
filter(F_MISS >= 0.03)
d_miss
